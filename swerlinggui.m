function varargout = swerlinggui(varargin)
% Create a figure that will have a uitable, axes and checkboxes
figure('Position', [100, 300, 600, 460],...
       'Name', 'Plot swerling for aircraft',...  % Title figure
       'NumberTitle', 'off',... % Do not show figure number
       'MenuBar', 'none');      % Hide standard menu bar menus

% Load some tabular data (traffic counts from somewhere)
count = load('swerlingdata.dat');
%count = [pd1' pd2' pd3'];
tablesize = size(count);    % This demo data is 24-by-3

% Define parameters for a uitable (col headers are fictional)
colnames = {'pd1', 'pd2', 'pd3', 'pd4'};
% All column contain numeric data (integers, actually)
colfmt = {'numeric', 'numeric', 'numeric', 'numeric'};
% Disallow editing values (but this can be changed)
coledit = [false false false false];
% Set columns all the same width (must be in pixels)
colwdt = {60 60 60 60};
% Create a uitable on the left side of the figure
htable = uitable('Units', 'normalized',...
                 'Position', [0.025 0.03 0.375 0.92],...
                 'Data',  count,... 
                 'ColumnName', colnames,...
                 'ColumnFormat', colfmt,...
                 'ColumnWidth', colwdt,...
                 'ColumnEditable', coledit,...
                 'ToolTipString',...
                 'Select cells to highlight them on the plot',...
                 'CellSelectionCallback', {@select_callback});

% Create an axes on the right side; set x and y limits to the
% table value extremes, and format labels for the demo data.
haxes = axes('Units', 'normalized',...
             'Position', [.465 .065 .50 .85],...
             'XLim', [0 tablesize(1)],...
             'YLim', [0 max(max(count))],...
             'XLimMode', 'manual',...
             'YLimMode', 'manual',...
             'XTickLabel',...
             {'0','30','60','90','120','150','180'});
title(haxes, 'Angle in degrees')   % Describe data set
% Prevent axes from clearing when new lines or markers are plotted
hold(haxes, 'all')

% Create an invisible marker plot of the data and save handles
% to the lineseries objects; use this to simulate data brushing.
hmkrs = plot(count, 'LineStyle', 'none',...
                    'Marker', 'o',...
                    'MarkerFaceColor', 'y',...
                    'HandleVisibility', 'off',...
                    'Visible', 'off');

% Create an advisory message (prompt) in the plot area;
% it will vanish once anything is plotted in the axes.
axpos = get(haxes, 'Position');
ptpos = axpos(1) + .1*axpos(3);
ptpos(2) = axpos(2) + axpos(4)/2;
ptpos(3) = .4; ptpos(4) = .035;
hprompt = uicontrol('Style', 'text',...
                    'Units', 'normalized',...
                    'Position', ptpos,... % [.45 .95 .3 .035],...
                    'String',...
                      'Use Plot check boxes to graph detection probability',...
                    'FontWeight', 'bold',...
                    'ForegroundColor', [1 .8 .8],...
                    'BackgroundColor', 'w');

% Create three check boxes to toggle plots for columns
uicontrol('Style', 'checkbox',...
          'Units', 'normalized',...
          'Position', [.10 .96 .09 .035],...
          'TooltipString', 'Check to plot column 1',...
          'String', 'Pd1',...
          'Value', 0,...
          'Callback', {@plot_callback,1});
uicontrol('Style', 'checkbox',...
          'Units', 'normalized',...
          'Position', [.20 .96 .09 .035],...
          'TooltipString', 'Check to plot column 2',...
          'String', 'Pd2',...
          'Value', 0,...
          'Callback', {@plot_callback,2});
uicontrol('Style', 'checkbox',...
          'Units', 'normalized',...
          'Position', [.30 .96 .09 .035],...
          'TooltipString', 'Check to plot column 3',...
          'String', 'Pd3',...
          'Value', 0,...
          'Callback', {@plot_callback,3});
uicontrol('Style', 'checkbox',...
          'Units', 'normalized',...
          'Position', [.40 .96 .09 .035],...
          'TooltipString', 'Check to plot column 4',...
          'String', 'Pd4',...
          'Value', 0,...
          'Callback', {@plot_callback,4});
      
      uicontrol('Style', 'text',...
          'Units', 'normalized',...
          'Position', [.025 .955 .06 .035],...
          'String', 'Plot',...
          'FontWeight', 'bold');
               
% Subfuntions implementing the two callbacks
% ------------------------------------------

    function plot_callback(hObject, eventdata, column)
    % hObject     Handle to Plot menu
    % column      Number of column to plot or clear

    colors = {'b','m','r','g'}; % Use consistent color for lines
    colnames = get(htable, 'ColumnName');
    colname = colnames{column};
    if get(hObject, 'Value')
        % Turn off the advisory text; it never comes back
        set(hprompt, 'Visible', 'off')
        % Obtain the data for that column
        ydata = get(htable, 'Data');
        set(haxes, 'NextPlot', 'Add')
        % Draw the line plot for column
        plot(haxes, ydata(:,column),...
            'DisplayName', colname,...
            'Color', colors{column});
    else % Adding a line to the plot
        % Find the lineseries object and delete it
        delete(findobj(haxes, 'DisplayName', colname))
    end
    end

      
 function select_callback(hObject, eventdata)
    % hObject    Handle to uitable1 (see GCBO)
    % eventdata  Currently selected table indices
    % Callback to erase and replot markers, showing only those
    % corresponding to user-selected cells in table. 
    % Repeatedly called while user drags across cells of the uitable

        % hmkrs are handles to lines having markers only
        set(hmkrs, 'Visible', 'off') % turn them off to begin
        
        % Get the list of currently selected table cells
        sel = eventdata.Indices;     % Get selection indices (row, col)
                                     % Noncontiguous selections are ok
        selcols = unique(sel(:,2));  % Get all selected data col IDs
        table = get(hObject,'Data'); % Get copy of uitable data
        
        % Get vectors of x,y values for each column in the selection;
        for idx = 1:numel(selcols)
            col = selcols(idx);
            xvals = sel(:,1);
            xvals(sel(:,2) ~= col) = [];
            yvals = table(xvals, col)';
            % Create Z-vals = 1 in order to plot markers above lines
            zvals = col*ones(size(xvals));
            % Plot markers for xvals and yvals using a line object
            set(hmkrs(col), 'Visible', 'on',...
                            'XData', xvals,...
                            'YData', yvals,...
                            'ZData', zvals)
        end
    end
 end 